Задача: с использованием пакета java.lang.reflect реализовать простейшую версию DI-контейнера,
представленную интерфейсом Injector.

Требования к реализации:

1. Запрещается использовать сторонние библиотеки.



2. Реализацию необходимо предоставить в существующем классе InjectorImpl.
3. В первую очередь контейнер использует конструктор с аннотацией Inject. Если в классе
присутствует несколько таких конструкторов, выбрасывается ConstructorAmbiguityException.
4. При отсутствии конструкторов с аннотацией Inject используется конструктор по умолчанию. При
отсутствии такового выбрасывается NoSuitableConstructorException.
5. Если контейнер использует конструктор с аннотацией Inject и для какого-либо аргумента контейнер
не может найти binding, выбрасывается BindingNotFoundException. +
6. В свою очередь, если мы явно запрашиваем Provider для какого-либо класса и нет соответствующего binding,
возвращается null.
7. Реализация singleton binding'ов должна быть ленивой.
8. Реализация должна быть потокобезопасная.
9. Все вышеупомянутые exception'ы должны выбрасываться в момент попытки получения экземпляра Provider'а.

Особенности:
1. Поддержка field и method injection не требуется.
2. Все аргументы конструкторов гарантировано являются reference type'ами. ???
3. Все конструкторы являются public.
4. Считается, что задание binding'ов происходит в правильном порядке и единоразово, т.е. вызов методов
bind* после getProvider не допускается.